import axios from 'axios';
import type { Message, User } from '../types';
import { getToken } from '../utils/auth';
import { BACKEND_URL } from './fetcher';

export const BASE_URL = import.meta.env.VITE_BACKEND_URL || `${BACKEND_URL}/api/zalo`;

// üì® L·∫•y to√†n b·ªô tin nh·∫Øn c·ªßa 1 user
export const fetchMessages = async (
  userId: string,
  role: 'admin' | 'telesale',
  telesaleId?: string
): Promise<Message[]> => {
  const token = getToken();
  const params = new URLSearchParams({ role });
  if (telesaleId) params.append('telesaleId', telesaleId);

  const res = await fetch(`${BASE_URL}/messages/${userId}?${params.toString()}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  if (!res.ok) {
    console.error('‚ùå fetchMessages failed:', res.status, await res.text());
    throw new Error('Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn');
  }

  return res.json();
};

// üí¨ G·ª≠i tin nh·∫Øn
export const sendMessage = async (userId: string, text: string) => {
  const token = getToken();
  const res = await fetch(`${BASE_URL}/send`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify({ userId, text }),
  });

  if (!res.ok) {
    console.error('‚ùå sendMessage failed:', res.status, await res.text());
    throw new Error('G·ª≠i tin nh·∫Øn th·∫•t b·∫°i');
  }

  return res.json();
};

// üìû Telesale g·ªçi cho kh√°ch h√†ng

export const fetchCallLink = async (userId: string): Promise<string> => {
  const token = getToken();
  if (!userId) throw new Error('userId kh√¥ng h·ª£p l·ªá');
  try {
    const res = await axios.post<{ success: boolean; callLink: string }>(
      `${BACKEND_URL}/api/zalo/call/create`,
      { userId },
      { headers: { Authorization: `Bearer ${token}` } }
    );
    if (res.data.success) {
      return res.data.callLink;
    } else {
      throw new Error('Kh√¥ng th·ªÉ t·∫°o link g·ªçi Zalo');
    }
  } catch (err: unknown) {
    if (axios.isAxiosError(err)) {
      console.error('‚ùå fetchCallLink failed:', err.response?.data || err.message);
    } else {
      console.error('‚ùå fetchCallLink failed:', err);
    }
    throw new Error('Kh√¥ng th·ªÉ t·∫°o link g·ªçi Zalo');
  }
};


// üë• L·∫•y danh s√°ch telesale (ch·ªâ admin)
export const fetchTelesales = async (): Promise<User[]> => {
  const token = getToken();
  const res = await fetch(`${BASE_URL}/telesales`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  if (!res.ok) {
    console.error('‚ùå fetchTelesales failed:', res.status, await res.text());
    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch telesale');
  }

  return res.json();
};

// üîÑ Ph√¢n c√¥ng telesale cho cu·ªôc h·ªôi tho·∫°i

export const assignTelesale = async (userId: string, telesaleId: string) => {
  const token = getToken();
  const res = await fetch(`${BASE_URL}/assign-conversation`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify({ userId, telesaleId }),
  });

  if (!res.ok) {
    console.error('‚ùå assignTelesale failed:', res.status, await res.text());
    throw new Error('Kh√¥ng th·ªÉ ch·ªâ ƒë·ªãnh telesale');
  }

  return res.json();
};
