"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.login = exports.register = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const User_1 = __importDefault(require("../models/User"));
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';
// ------------------ H√†m ƒëƒÉng k√Ω ------------------
const register = async (req, res) => {
    try {
        const { email, password, confirmPassword, username, phone, address, role } = req.body;
        const avatar = req.file;
        if (!email || !password || !confirmPassword || !username || !phone || !address) {
            res.status(400).json({ message: 'Thi·∫øu th√¥ng tin ƒëƒÉng k√Ω.' });
            return;
        }
        if (password !== confirmPassword) {
            res.status(400).json({ message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.' });
            return;
        }
        const existing = await User_1.default.findOne({ email });
        if (existing) {
            res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i.' });
            return;
        }
        // üîπ Hash password tr∆∞·ªõc khi t·∫°o User
        const hashedPassword = await User_1.default.hashPassword(password);
        const newUser = new User_1.default({
            email,
            password,
            username,
            phone,
            address,
            avatar: avatar
                ? { path: avatar.path, filename: avatar.filename, originalname: avatar.originalname }
                : undefined,
            role: role || 'telesale',
        });
        await newUser.save();
        res.status(201).json({
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng.',
            user: { id: newUser._id, username: newUser.username, role: newUser.role },
        });
    }
    catch (err) {
        console.error('Register Error:', err);
        res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng k√Ω.' });
    }
};
exports.register = register;
// ------------------ H√†m ƒëƒÉng nh·∫≠p ------------------
const login = async (req, res) => {
    try {
        // üîπ Log body nh·∫≠n ƒë∆∞·ª£c
        console.log('--- [LOGIN] req.body ---', req.body);
        if (!req.body || typeof req.body !== 'object') {
            console.warn('‚ö†Ô∏è req.body is missing or not an object');
            res.status(400).json({ message: 'Kh√¥ng c√≥ d·ªØ li·ªáu g·ª≠i l√™n.' });
            return;
        }
        const email = typeof req.body.email === 'string' ? req.body.email.trim() : null;
        const password = typeof req.body.password === 'string' ? req.body.password.trim() : null;
        console.log('--- [LOGIN] email:', email, 'password exists:', !!password);
        if (!email || !password) {
            res.status(400).json({ message: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u.' });
            return;
        }
        const user = await User_1.default.findOne({ email });
        if (!user) {
            console.warn('‚ö†Ô∏è User not found for email:', email);
            res.status(401).json({ message: 'Email kh√¥ng t·ªìn t·∫°i.' });
            return;
        }
        const isMatch = await user.comparePassword(password);
        if (!isMatch) {
            console.warn('‚ö†Ô∏è Password mismatch for email:', email);
            res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });
            return;
        }
        const token = jsonwebtoken_1.default.sign({ id: user._id, role: user.role }, JWT_SECRET, { expiresIn: '7d' });
        console.log('‚úÖ [LOGIN] Success for user:', email);
        res.status(200).json({
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng.',
            token,
            user: {
                id: user._id,
                email: user.email,
                username: user.username,
                phone: user.phone,
                address: user.address,
                avatar: user.avatar,
                role: user.role,
            },
        });
    }
    catch (err) {
        console.error('‚ùå [LOGIN] Server error:', err);
        res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng nh·∫≠p.' });
    }
};
exports.login = login;
